document.addEventListener("DOMContentLoaded", (() => { gsap.registerPlugin(ScrollTrigger, SplitText, ScrollToPlugin, Draggable, InertiaPlugin); const mobileBreakpoint = 900; let preventResizeTimeout, isVideoFullscreen = !1, videoPlayed = !1; function refreshAllAnimations() { isVideoFullscreen || (ScrollTrigger.getAll().forEach((trigger => trigger.kill())), createScrollTween(), initBackgrounds(), updateLine(), createTitleAnimations(), createRollingTextAnimations(), createMarqueeAnimations(), createListAnimations(), updateActiveNavItem()) } window.addEventListener("resize", (() => { isVideoFullscreen || (clearTimeout(preventResizeTimeout), preventResizeTimeout = setTimeout(refreshAllAnimations, 200)) })), document.addEventListener("fullscreenchange", (() => { document.fullscreenElement ? isVideoFullscreen = !0 : (clearTimeout(preventResizeTimeout), preventResizeTimeout = setTimeout((() => { isVideoFullscreen = !1 }), 200)) })); document.querySelectorAll("video").forEach((video => { video.addEventListener("click", (() => { document.fullscreenElement || (isVideoFullscreen = !0) })) })); const container = document.querySelector(".horizontal-scroll-container"), content = document.querySelector(".horizontal-scroll-content"); let scrollTween, draggable; function createScrollTween() { const viewportWidth = window.innerWidth, x = -(content.offsetWidth - viewportWidth); scrollTween = gsap.to(content, { x: x, ease: "none", scrollTrigger: { trigger: container, pin: !0, scrub: 1, end: () => "+=" + container.offsetWidth, invalidateOnRefresh: !0 } }), window.matchMedia("(pointer: coarse)").matches && (container.addEventListener("touchmove", (function (event) { event.preventDefault() }), { passive: !1 }), draggable && draggable.kill(), draggable = Draggable.create(content, { type: "x", bounds: { minX: x, maxX: 0 }, inertia: !0, onDrag: function () { let progress = Math.abs(this.x / x); scrollTween.progress(progress) }, onThrowUpdate: function () { let progress = Math.abs(this.x / x); scrollTween.progress(progress) } })[0]) } createScrollTween(); const sections = document.querySelectorAll(".horizontal-section"); let count = 1; for (const section of sections) { const navItem = document.createElement("li"); navItem.classList.add("horizontal-nav__item"), navItem.dataset.sectionId = "#" + section.id, navItem.innerHTML = `<a href="#${section.id}" class="horizontal-nav__link horizontal-anchor-link"><span class="horizontal-nav__num">0${count}</span><span class="horizontal-nav__name">${section.dataset.name}</span></a>`, document.querySelector("#horizontal-nav-links").appendChild(navItem), count++ } function updateLine() { const activeItem = document.querySelector(".horizontal-nav__item.active"); if (!activeItem) return; const line = document.querySelector(".horizontal-nav__line"), rect = (activeItem.querySelector(".horizontal-nav__link"), activeItem.querySelector(".horizontal-nav__num").getBoundingClientRect()), navRect = document.querySelector("#horizontal-nav-links").getBoundingClientRect(), offsetLeft = rect.left - navRect.left; gsap.to(line, { duration: 1, width: offsetLeft + rect.width, ease: "power2.inOut" }) } document.querySelectorAll(".horizontal-anchor-link").forEach((link => { link.addEventListener("click", (e => { e.preventDefault(); const viewportWidth = window.innerWidth, contentWidth = content.offsetWidth, targetElem = document.querySelector(link.getAttribute("href")); let y = targetElem; if (targetElem && content.contains(targetElem)) { const totalScroll = scrollTween.scrollTrigger.end - scrollTween.scrollTrigger.start, totalMovement = contentWidth - viewportWidth; y = Math.round(scrollTween.scrollTrigger.start + targetElem.offsetLeft / totalMovement * totalScroll) } link.classList.contains("horizontal-anchor-link--no-mask") || function () { const mask = document.querySelector(".horizontal-mask"); gsap.timeline().fromTo(mask, { duration: 0, x: "0vw", opacity: 0, ease: "none" }, { duration: .2, opacity: 1, x: "0", ease: "power2.inOut" }).fromTo(mask, { duration: 0, opacity: 1, x: "0", ease: "power2.inOut" }, { duration: .5, opacity: 1, x: "-100vw", ease: "power2.inOut", delay: .5 }) }(), gsap.to(window, { scrollTo: { y: y, autoKill: !1, ease: "none" }, duration: .2, onComplete: () => { updateLine() } }) })) })); const horizontalNavItems = document.querySelectorAll(".horizontal-nav__item"); function updateActiveNavItem() { sections.forEach((section => { ScrollTrigger.create({ trigger: section, containerAnimation: scrollTween, horizontal: !0, start: "left center", onEnter: () => { const navItem = [...horizontalNavItems].find((item => item.dataset.sectionId === `#${section.id}`)); navItem && (horizontalNavItems.forEach((item => item.classList.remove("active"))), navItem.classList.add("active"), updateLine()) }, onEnterBack: () => { const navItem = [...horizontalNavItems].find((item => item.dataset.sectionId === `#${section.id}`)); navItem && (horizontalNavItems.forEach((item => item.classList.remove("active"))), navItem.classList.add("active"), updateLine()) }, onLeave: () => { const navItem = [...horizontalNavItems].find((item => item.dataset.sectionId === `#${section.id}`)); navItem && navItem.classList.remove("active") }, onLeaveBack: () => { const navItem = [...horizontalNavItems].find((item => item.dataset.sectionId === `#${section.id}`)); navItem && navItem.classList.remove("active") } }) })), updateLine() } function videoPlayEvent() { if (!1 === videoPlayed) { const currentTimeISO = (new Date).toISOString(); _hsq.push(["trackCustomBehavioralEvent", { name: "pe3330328_blue_horizons___play_video", properties: { timestamp: currentTimeISO } }]), console.log(currentTimeISO), videoPlayed = !0 } } !function () { let minDiff = 1 / 0, activeSection = null; if (updateActiveNavItem(), sections.forEach((section => { const rect = section.getBoundingClientRect(), diff = Math.abs(rect.left - window.innerWidth / 2); diff < minDiff && (minDiff = diff, activeSection = section) })), activeSection) { const navItem = [...horizontalNavItems].find((item => item.dataset.sectionId === `#${activeSection.id}`)); navItem && (navItem.classList.add("active"), updateLine()) } }(); const heroTop = document.querySelector(".horizontal-hero__content-top"), heroBottom = document.querySelector(".horizontal-hero__content-bottom p"), heroLink = document.querySelector(".horizontal-hero__content-link"); document.querySelectorAll(".horizontal-headline-hero").forEach((element => { let text = new SplitText(element, { type: "chars, words" }), timeline = gsap.timeline({ paused: !0 }); timeline.to(text.chars, { opacity: 1, duration: 0, stagger: .05, delay: .5, ease: "none", immediateRender: !1 }), timeline.fromTo(heroTop, { opacity: 0, x: -20 }, { opacity: 1, x: 0, duration: 1 }).fromTo(heroBottom, { opacity: 0, x: -20 }, { opacity: 1, x: 0, duration: 1 }, "-=0.5").fromTo(heroLink, { opacity: 0, x: -20 }, { opacity: 1, x: 0, duration: 1 }, "-=0.5"), ScrollTrigger.create({ trigger: element, start: "left 100%", once: !0, onEnter: () => timeline.play() }) })); function initBackgrounds() { document.querySelectorAll(".horizontal-section--bg-image").forEach((track => { const image = track.querySelector(".horizontal-section__parallax-bg-wrapper"), trackWidth = track.offsetWidth; gsap.fromTo(image, { x: 0 }, { x: trackWidth, ease: "none", scrollTrigger: { trigger: track, containerAnimation: scrollTween, start: "left left", end: "right left", scrub: !0, markers: !1 } }) })) } document.querySelectorAll(".horizontal-parallax-image img").forEach((image => { gsap.fromTo(image, { xPercent: 10, scale: 1.2 }, { xPercent: -10, scale: 1.2, ease: "none", scrollTrigger: { trigger: image, containerAnimation: scrollTween, start: "left right", end: "right left", scrub: !0 } }) })), initBackgrounds(); const watchFilmButtons = document.querySelectorAll(".watch-film-button"), videoWrapper = document.querySelector("#watch-film .horizontal-video"), video = document.querySelector("#watch-film video"); function createTitleAnimations() { const customXPercentValues = [40, 30, 60]; document.querySelectorAll(".horizontal-title").forEach((title => { title.querySelectorAll(".horizontal-title__row").forEach(((row, index) => { const xPercentValue = customXPercentValues[index] || 0; gsap.fromTo(row, { xPercent: xPercentValue }, { xPercent: 0, ease: "none", scrollTrigger: { trigger: row, containerAnimation: scrollTween, start: "left right", end: "right left", scrub: !0, markers: !1 } }) })) })) } function createRollingTextAnimations() { document.querySelectorAll(".horizontal-rolling-text__track").forEach((track => { const content = track.querySelector(".horizontal-rolling-text__content"), movingTexts = track.querySelector(".horizontal-rolling-text__moving-texts"), movingTextsWrapper = track.querySelector(".horizontal-rolling-text__moving-texts-wrapper"), movingTextsHeight = movingTexts.scrollHeight, trackWidth = track.offsetWidth, movingTextHeight = movingTexts.querySelector(".horizontal-rolling-text__moving-text").offsetHeight; movingTextsWrapper.style.height = movingTextHeight + 4 + "px", movingTextsWrapper.style.marginBottom = "-4px"; const staticText = track.querySelector(".horizontal-rolling-text__static-text"), movingTextsWrapperWidth = movingTextsWrapper.offsetWidth; staticText.offsetWidth; gsap.fromTo(content, { x: 0 }, { x: trackWidth, ease: "none", scrollTrigger: { trigger: track, containerAnimation: scrollTween, start: "left left", end: "right left", scrub: !0, markers: !1 } }), gsap.fromTo(movingTexts, { y: 0 }, { y: -(movingTextsHeight - movingTextHeight - 4), ease: "none", scrollTrigger: { trigger: track, containerAnimation: scrollTween, start: "left left", end: "right left", scrub: !0, markers: !1 } }) })) } watchFilmButtons.forEach((button => { button.addEventListener("click", (() => { setTimeout((() => { videoWrapper.classList.add("playing"), video.controls = !0, video.play(), videoPlayEvent() }), 1e3) })) })), createTitleAnimations(), createRollingTextAnimations(); function createMarqueeAnimations() { document.querySelectorAll(".vertical-marquee").forEach((marquee => { const marqueeContent = marquee.querySelector(".vertical-marquee__content"), marqueeContentHeight = marqueeContent.scrollHeight, viewportHeight = window.innerHeight; gsap.fromTo(marqueeContent, { y: 0 }, { y: -(marqueeContentHeight - viewportHeight), ease: "none", scrollTrigger: { trigger: marquee, containerAnimation: scrollTween, start: "left right", end: "right left", scrub: !0, markers: !1 } }) })) } function createListAnimations() { document.querySelectorAll(".horizontal-list").forEach((horizontalList => { if (window.innerWidth > mobileBreakpoint) { const listTrack = horizontalList.querySelector(".horizontal-list__track"), listContent = horizontalList.querySelector(".horizontal-list__content"), trackWidth = listTrack.offsetWidth; gsap.fromTo(listContent, { x: 0 }, { x: trackWidth, ease: "none", scrollTrigger: { trigger: listTrack, containerAnimation: scrollTween, start: "left left", end: "right left", scrub: !0, markers: !1 } }), gsap.fromTo(horizontalList.querySelectorAll(".horizontal-list__item"), { xPercent: 150 }, { xPercent: 0, stagger: .5, duration: 2, scrollTrigger: { trigger: horizontalList, containerAnimation: scrollTween, start: "left right", end: "right right", scrub: !0, markers: !1 } }) } })) } document.querySelectorAll(".horizontal-toggle-text").forEach((toggleText => { const toggleButton = toggleText.querySelector(".horizontal-toggle-text__button"), toggleTextContent = toggleText.querySelector(".horizontal-toggle-text__toggle-text"); toggleButton.addEventListener("click", (() => { toggleTextContent.classList.contains("active") ? (gsap.to(toggleTextContent, { height: 0, marginBottom: "0", opacity: 0, ease: "power2.inOut", duration: .5 }), toggleTextContent.classList.remove("active")) : (gsap.to(toggleTextContent, { height: "auto", marginBottom: "15px", opacity: 1, ease: "power2.inOut", duration: .5 }), toggleTextContent.classList.add("active")) })) })), createMarqueeAnimations(), createListAnimations(); function closeAllCards() { document.querySelectorAll(".horizontal-cards__item").forEach((card => { card.classList.remove("active"); card.getAttribute("data-card"); const hcard__main = card.querySelector(".hcard__main"), hcard__close = card.querySelector(".hcard__close"), hcard__preview = card.querySelector(".hcard__preview"), hcard__preview_title = card.querySelector(".hcard__preview-title"), hcard__hero = card.querySelector(".hcard__hero"), hcard__bg = card.querySelector(".hcard__bg"); gsap.to(card, { duration: 1, width: "450px" }), gsap.to(hcard__hero, { duration: 1, left: "0", scale: 1, zIndex: 2 }), gsap.to(hcard__preview, { duration: 1, right: "0" }), gsap.to(hcard__preview_title, { duration: 1, opacity: 1 }), gsap.to(hcard__bg, { duration: 1, opacity: 0 }), gsap.to(hcard__main, { duration: 1, opacity: 0, zIndex: 1 }), gsap.to(hcard__close, { duration: 1, delay: 0, opacity: 0 }) })) } document.querySelectorAll(".horizontal-video").forEach((videoModule => { const video = videoModule.querySelector("video"), playButton = videoModule.querySelector(".play-button"); video.getAttribute("id"); playButton.addEventListener("click", (() => { video.play(), videoPlayEvent(), video.controls = !0, videoModule.classList.add("playing") })), video.addEventListener("pause", (() => { videoModule.classList.remove("playing"), video.controls = !1 })); new IntersectionObserver((entries => { entries.forEach((entry => { 1 === entry.intersectionRatio || video.paused || (video.pause(), videoModule.classList.remove("playing")) })) }), { threshold: 0 }).observe(video) })), document.querySelectorAll(".hcard__preview").forEach((card => { card.addEventListener("click", (function (event) { if (event.preventDefault(), window.innerWidth > mobileBreakpoint) { closeAllCards(); const cardNumber = this.getAttribute("data-card"), hcard = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"]`), hcard__main = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__main`), hcard__close = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__close`), hcard__preview = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__preview`), hcard__preview_title = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__preview-title`), hcard__hero = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__hero`), hcard__bg = document.querySelector(`.horizontal-cards__item[data-card="${cardNumber}"] .hcard__bg`); hcard.classList.add("active"); const hcard__hero_width = hcard__hero.offsetWidth; gsap.to(hcard, { duration: 1, width: "85vw" }), gsap.to(hcard__hero, { duration: 1, left: `calc(100% - ${hcard__hero_width}px)`, scale: .75, zIndex: 1 }), gsap.to(hcard__preview_title, { duration: 1, opacity: 0 }), gsap.to(hcard__bg, { duration: 1, opacity: 1 }), gsap.to(hcard__main, { duration: 1, delay: 1, opacity: 1, zIndex: 3 }), gsap.to(hcard__close, { duration: 1, delay: 1, opacity: 1 }); hcard.querySelector(`.hcard__close[data-card="${cardNumber}"]`).addEventListener("click", (function () { gsap.to(hcard, { duration: 1, width: "450px" }), gsap.to(hcard__hero, { duration: 1, left: "0", scale: 1, zIndex: 2 }), gsap.to(hcard__preview, { duration: 1, right: "0" }), gsap.to(hcard__preview_title, { duration: 1, opacity: 1 }), gsap.to(hcard__bg, { duration: 1, opacity: 0 }), gsap.to(hcard__main, { duration: 1, opacity: 0, zIndex: 1 }), gsap.to(hcard__close, { duration: 1, delay: 0, opacity: 0 }), cardOpen = !1 })), cardOpen = !0 } else window.open(this.href, "_blank") })) })); const cardObserver = new IntersectionObserver((entries => { entries.forEach((entry => { entry.intersectionRatio < .25 && entry.target.classList.contains("active") && closeAllCards() })) }), { threshold: [0, .25, 1] }); if (document.querySelectorAll(".horizontal-cards__item").forEach((card => { cardObserver.observe(card) })), function () { let check = !1; var a; return a = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) && (check = !0), check }()) if (window.addEventListener("orientationchange", (() => { window.matchMedia("(orientation: landscape)").matches ? (document.querySelector(".body-wrapper").classList.remove("horizontal-portait-mode"), document.querySelector(".body-wrapper").classList.add("horizontal-landscape-mode")) : (document.querySelector(".body-wrapper").classList.add("horizontal-portait-mode"), document.querySelector(".body-wrapper").classList.remove("horizontal-landscape-mode")) })), window.matchMedia("(orientation: portrait)").matches) { document.querySelector(".body-wrapper").classList.add("horizontal-portait-mode"); const popupWrapper = document.querySelector(".horizontal-mobile-popup-wrapper"); popupWrapper.style.display = "block"; const popup = document.querySelector(".horizontal-mobile-popup"); gsap.to(popup, { duration: 1, opacity: 1 }); popup.querySelector(".horizontal-mobile-popup__close-popup").addEventListener("click", (function () { gsap.to(popup, { duration: 1, opacity: 0, onComplete: () => { popupWrapper.style.display = "none" } }) })), window.addEventListener("orientationchange", (() => { window.matchMedia("(orientation: landscape)").matches && gsap.to(popup, { duration: 1, opacity: 0, onComplete: () => { popupWrapper.style.display = "none" } }) })), window.addEventListener("click", (event => { event.target === popupWrapper && gsap.to(popup, { duration: 1, opacity: 0, onComplete: () => { popupWrapper.style.display = "none" } }) })) } else document.querySelector(".body-wrapper").classList.add("horizontal-landscape-mode") }));
//# sourceURL=https://cdn2.hubspot.net/hub/3330328/hub_generated/template_assets/172428733089/1722861878722/iceye-new/js/horizontal-js/horizontal.js